{
	"Object Method": {
		"prefix": "kf",
		"body": [
			"${1:methodName}: function (${2:attribute}) {",
			"\t$3",
			"}${4:,}"
		]
	},
	"Object key — key: \"value\"": {
		"prefix": "kv",
		"body": "${1:key}: ${2:'${3:value}'}${4:, }"
	},
	"Prototype": {
		"prefix": "proto",
		"body": [
			"${1:ClassName}.prototype.${2:methodName} = function ($3) {",
			"\t$0",
			"};"
		]
	},
	"do": {
		"prefix": "do",
		"body": [
			"do {",
			"\t$2",
			"} while (${1:true});"
		]
	},
	"condition ? true : false": {
		"prefix": "tern",
		"body": "${1:condition} ? ${2:true} : ${3:false}"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if (${1:true}) {",
			"\t$2",
			"}"
		]
	},
	"if … else": {
		"prefix": "ife",
		"body": [
			"if (${1:true}) {",
			"\t$2",
			"} else {",
			"\t$3",
			"}"
		]
	},
	"else": {
		"prefix": "else",
		"body": [
			"else {",
			"\t$1",
			"}"
		]
	},
	"else if": {
		"prefix": "elseif",
		"body": [
			"else if (${1:true}) {",
			"\t$2",
			"}"
		]
	},
	"for": {
		"prefix": "for",
		"body": [
			"for (var ${2:i} = 0; ${2:i} < ${1:array}.length; ${2:i}++) {",
			"\t${1:array}[${2:i}]$3",
			"}"
		]
	},
	"for in": {
		"prefix": "forin",
		"body": [
			"for (var ${1:variable} in ${2:object}) {",
			"\t${3:if (${2:object}.hasOwnProperty(${1:variable})) {",
			"\t\t$4",
			"\t\\}}",
			"}"
		]
	},
	"for of": {
		"prefix": "forof",
		"body": [
			"for (${1:variable} of ${2:iterable}) {",
			"\t$3",
			"}"
		]
	},
	"Function": {
		"prefix": "fun",
		"body": [
			"function ${1:functionName}($2) {",
			"\t$0",
			"}"
		]
	},
	"Anonymous Function": {
		"prefix": "f",
		"body": [
			"function ($1) {",
			"\t$2",
			"}"
		]
	},
	"Arrow Function": {
		"prefix": "af",
		"body": [
			"($1) => {",
			"\t$2",
			"}"
		]
	},
	"Generator": {
		"prefix": "gen",
		"body": [
			"function* ${1:functionName}($2) {",
			"\t$0",
			"}"
		]
	},
	"Anonymous Generator": {
		"prefix": "g",
		"body": [
			"function* ($1) {",
			"\t$2",
			"}"
		]
	},
	"getElementsByClassName": {
		"prefix": "get",
		"body": "getElementsByClassName(${1:'${2:className}'})$3"
	},
	"getElementsByName": {
		"prefix": "getn",
		"body": "getElementsByName(${1:'${2:name}'})$3"
	},
	"getElementsByTagName": {
		"prefix": "gett",
		"body": "getElementsByTagName(${1:'${2:tagName}'})$3"
	},
	"getElementById": {
		"prefix": "geti",
		"body": "getElementById(${1:'${2:id}'})$3"
	},
	"querySelector": {
		"prefix": "qs",
		"body": "querySelector(${1:'${2:query}'})$3"
	},
	"querySelectorAll": {
		"prefix": "qsa",
		"body": "querySelectorAll(${1:'${2:query}'})$3"
	},
	"Immediately-Invoked Function Expression": {
		"prefix": "iife",
		"body": [
			"(function() {",
			"\t${1:'use strict';\n}\t$2",
			"}());"
		]
	},
	"log": {
		"prefix": "log",
		"body": "console.log($1);$0"
	},
	"warn": {
		"prefix": "warn",
		"body": "console.warn($1);$0"
	},
	"error": {
		"prefix": "error",
		"body": "console.error($1);$0"
	},
	"inspect": {
		"prefix": "inspect",
		"body": "console.log(require('util').inspect($0, { depth: null }));"
	},
	"new Promise": {
		"prefix": "prom",
		"body": [
			"new Promise(function(resolve, reject) {",
			"\t$1",
			"});$0"
		]
	},
	"setInterval function": {
		"prefix": "interval",
		"body": [
			"setInterval(${2:function () {",
			"\t$3",
			"\\}}, ${1:10});"
		]
	},
	"setTimeout function": {
		"prefix": "timeout",
		"body": [
			"setTimeout(${2:function () {",
			"\t$3",
			"\\}}, ${1:10});"
		]
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${1:expression}) {",
			"\tcase ${2:expression}:",
			"\t\t$4",
			"\t\tbreak;$5",
			"\tdefault:",
			"\t\t$3",
			"}"
		]
	},
	"case": {
		"prefix": "case",
		"body": [
			"case ${1:expression}:",
			"\t$2",
			"\tbreak;"
		]
	},
	"try": {
		"prefix": "try",
		"body": [
			"try {",
			"\t$1",
			"} catch (${2:e}) {",
			"\t$3",
			"}${4: finally {",
			"\t$5",
			"\\}}"
		]
	},
	"while": {
		"prefix": "while",
		"body": [
			"while (${1:true}) {",
			"\t$2",
			"}"
		]
	},
	"Start Docblock": {
		"prefix": "/**",
		"body": [
			"/**",
			" * $1",
			" */$0"
		]
	},
	"CommonJS require": {
		"prefix": "req",
		"body": "const ${1:module} = require('${1:module}');"
	},
	"Class": {
		"prefix": "class",
		"body": [
			"class ${1:ClassName} {",
			"\tconstructor($2) {",
			"\t\t$3",
			"\t}",
			"}"
		]
	},
	"export function": {
		"prefix": "expfun",
		"body": [
			"exports.${1:functionName} = function ($2) {",
			"\t${3:// body...}",
			"};"
		]
	},
	"export module": {
		"prefix": "expmod",
		"body": "module.exports = ${1:name};"
	},
	"return": {
		"prefix": "ret",
		"body": "return $1;$0"
	}
}
